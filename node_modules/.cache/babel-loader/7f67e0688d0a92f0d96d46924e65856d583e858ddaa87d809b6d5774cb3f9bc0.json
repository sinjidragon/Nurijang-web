{"ast":null,"code":"// src/utils/coordinates.js\nexport const isValidCoordinate = value => {\n  if (value === undefined || value === null) return false;\n  const num = Number(value);\n  return !isNaN(num) && isFinite(num);\n};\nexport const parseCoordinates = (lat, lng) => {\n  // 상세한 디버깅 로그\n  console.log('Parsing coordinates input:', {\n    lat: {\n      value: lat,\n      type: typeof lat\n    },\n    lng: {\n      value: lng,\n      type: typeof lng\n    }\n  });\n\n  // 좌표가 없는 경우\n  if (lat === undefined || lat === null || lng === undefined || lng === null) {\n    console.error('Missing coordinates:', {\n      lat,\n      lng\n    });\n    return null;\n  }\n\n  // 문자열인 경우 숫자로 변환\n  const parsedLat = typeof lat === 'string' ? parseFloat(lat) : Number(lat);\n  const parsedLng = typeof lng === 'string' ? parseFloat(lng) : Number(lng);\n\n  // 유효성 검사\n  if (!isValidCoordinate(parsedLat) || !isValidCoordinate(parsedLng)) {\n    console.error('Invalid coordinates after parsing:', {\n      original: {\n        lat,\n        lng\n      },\n      parsed: {\n        lat: parsedLat,\n        lng: parsedLng\n      }\n    });\n    return null;\n  }\n\n  // 좌표 범위 검사 (한국 기준으로 범위 조정)\n  if (parsedLat < 33 || parsedLat > 39 || parsedLng < 124 || parsedLng > 132) {\n    console.error('Coordinates out of Korea range:', {\n      lat: parsedLat,\n      lng: parsedLng\n    });\n    return null;\n  }\n  return {\n    lat: parsedLat,\n    lng: parsedLng\n  };\n};\n\n// 두 좌표 사이의 거리 계산 (Haversine formula)\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  if (!isValidCoordinate(lat1) || !isValidCoordinate(lon1) || !isValidCoordinate(lat2) || !isValidCoordinate(lon2)) {\n    return null;\n  }\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 킬로미터 단위 거리\n};\nconst deg2rad = deg => {\n  return deg * (Math.PI / 180);\n};","map":{"version":3,"names":["isValidCoordinate","value","undefined","num","Number","isNaN","isFinite","parseCoordinates","lat","lng","console","log","type","error","parsedLat","parseFloat","parsedLng","original","parsed","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","deg","PI"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/utils/coordinates.js"],"sourcesContent":["// src/utils/coordinates.js\nexport const isValidCoordinate = (value) => {\n  if (value === undefined || value === null) return false;\n  const num = Number(value);\n  return !isNaN(num) && isFinite(num);\n};\n\nexport const parseCoordinates = (lat, lng) => {\n  // 상세한 디버깅 로그\n  console.log('Parsing coordinates input:', {\n    lat: { value: lat, type: typeof lat },\n    lng: { value: lng, type: typeof lng }\n  });\n\n  // 좌표가 없는 경우\n  if (lat === undefined || lat === null || lng === undefined || lng === null) {\n    console.error('Missing coordinates:', { lat, lng });\n    return null;\n  }\n\n  // 문자열인 경우 숫자로 변환\n  const parsedLat = typeof lat === 'string' ? parseFloat(lat) : Number(lat);\n  const parsedLng = typeof lng === 'string' ? parseFloat(lng) : Number(lng);\n\n  // 유효성 검사\n  if (!isValidCoordinate(parsedLat) || !isValidCoordinate(parsedLng)) {\n    console.error('Invalid coordinates after parsing:', {\n      original: { lat, lng },\n      parsed: { lat: parsedLat, lng: parsedLng }\n    });\n    return null;\n  }\n\n  // 좌표 범위 검사 (한국 기준으로 범위 조정)\n  if (parsedLat < 33 || parsedLat > 39 || parsedLng < 124 || parsedLng > 132) {\n    console.error('Coordinates out of Korea range:', { lat: parsedLat, lng: parsedLng });\n    return null;\n  }\n\n  return {\n    lat: parsedLat,\n    lng: parsedLng\n  };\n};\n\n// 두 좌표 사이의 거리 계산 (Haversine formula)\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  if (!isValidCoordinate(lat1) || !isValidCoordinate(lon1) || \n      !isValidCoordinate(lat2) || !isValidCoordinate(lon2)) {\n    return null;\n  }\n\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  \n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c; // 킬로미터 단위 거리\n};\n\nconst deg2rad = (deg) => {\n  return deg * (Math.PI/180);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}