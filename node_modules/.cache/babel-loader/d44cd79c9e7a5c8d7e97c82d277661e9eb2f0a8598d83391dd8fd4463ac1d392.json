{"ast":null,"code":"var _jsxFileName = \"/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js\",\n  _s = $RefreshSig$();\n// ChatContainer.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst INITIAL_MESSAGE = {\n  id: 'initial',\n  type: 'assistant',\n  content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요'\n};\nconst SUGGESTED_QUESTIONS = ['운동 후 근육통을 줄이는 법을 알려주세요', '가까운 운동시설을 추천해주세요', '운동할 때 주의할 점은 무엇인가요?'];\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([INITIAL_MESSAGE]);\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSuggestedQuestion = question => {\n    sendMessage(question);\n  };\n  const sendMessage = async text => {\n    if (!text.trim() || loading) return;\n    try {\n      setLoading(true);\n      // 사용자 메시지 추가\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n\n      // 임시 응답 (서버 연결이 안될 때를 위한 처리)\n      setTimeout(() => {\n        setMessages(prev => [...prev, {\n          id: Date.now() + 1,\n          type: 'assistant',\n          content: '현재 서버 연결이 원활하지 않습니다. 잠시 후 다시 시도해주세요.'\n        }]);\n        setLoading(false);\n      }, 1000);\n\n      // 실제 서버 연결 시 사용할 코드\n      /*\n      const response = await fetch('http://localhost:8080/chat/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: text })\n      });\n       if (!response.ok) throw new Error('메시지 전송 실패');\n       const data = await response.json();\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: data.response\n      }]);\n      */\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        type: message.type,\n        content: message.content\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), messages.length === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggested-questions\",\n        children: SUGGESTED_QUESTIONS.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"suggested-question-btn\",\n          onClick: () => handleSuggestedQuestion(question),\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSend: sendMessage,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatContainer, \"QskqcNyi+b4N12JRobWTW+LRccw=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageBubble","ChatInput","jsxDEV","_jsxDEV","Fragment","_Fragment","INITIAL_MESSAGE","id","type","content","SUGGESTED_QUESTIONS","ChatContainer","_s","messages","setMessages","loading","setLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSuggestedQuestion","question","sendMessage","text","trim","prev","Date","now","setTimeout","error","console","children","className","map","message","fileName","_jsxFileName","lineNumber","columnNumber","length","index","onClick","ref","onSend","disabled","_c","$RefreshReg$"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js"],"sourcesContent":["// ChatContainer.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport './Chat.css';\n\nconst INITIAL_MESSAGE = {\n  id: 'initial',\n  type: 'assistant',\n  content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요'\n};\n\nconst SUGGESTED_QUESTIONS = [\n  '운동 후 근육통을 줄이는 법을 알려주세요',\n  '가까운 운동시설을 추천해주세요',\n  '운동할 때 주의할 점은 무엇인가요?'\n];\n\nconst ChatContainer = () => {\n  const [messages, setMessages] = useState([INITIAL_MESSAGE]);\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSuggestedQuestion = (question) => {\n    sendMessage(question);\n  };\n\n  const sendMessage = async (text) => {\n    if (!text.trim() || loading) return;\n\n    try {\n      setLoading(true);\n      // 사용자 메시지 추가\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n\n      // 임시 응답 (서버 연결이 안될 때를 위한 처리)\n      setTimeout(() => {\n        setMessages(prev => [...prev, {\n          id: Date.now() + 1,\n          type: 'assistant',\n          content: '현재 서버 연결이 원활하지 않습니다. 잠시 후 다시 시도해주세요.'\n        }]);\n        setLoading(false);\n      }, 1000);\n\n      // 실제 서버 연결 시 사용할 코드\n      /*\n      const response = await fetch('http://localhost:8080/chat/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: text })\n      });\n\n      if (!response.ok) throw new Error('메시지 전송 실패');\n\n      const data = await response.json();\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: data.response\n      }]);\n      */\n\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"chat-messages\">\n        {messages.map(message => (\n          <MessageBubble\n            key={message.id}\n            type={message.type}\n            content={message.content}\n          />\n        ))}\n        {messages.length === 1 && (\n          <div className=\"suggested-questions\">\n            {SUGGESTED_QUESTIONS.map((question, index) => (\n              <button\n                key={index}\n                className=\"suggested-question-btn\"\n                onClick={() => handleSuggestedQuestion(question)}\n              >\n                {question}\n              </button>\n            ))}\n          </div>\n        )}\n        {loading && (\n          <div className=\"typing-indicator\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <ChatInput onSend={sendMessage} disabled={loading} />\n    </>\n  );\n};\n\nexport default ChatContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}