{"ast":null,"code":"// src/utils/coordinates.js\nexport const isValidCoordinate = value => {\n  const num = Number(value);\n  return !isNaN(num) && isFinite(num);\n};\nexport const parseCoordinates = (lat, lng) => {\n  // 입력값 타입 로깅\n  console.log('Parsing coordinates:', {\n    lat: {\n      value: lat,\n      type: typeof lat\n    },\n    lng: {\n      value: lng,\n      type: typeof lng\n    }\n  });\n\n  // 문자열인 경우 숫자로 변환\n  const parsedLat = typeof lat === 'string' ? parseFloat(lat) : Number(lat);\n  const parsedLng = typeof lng === 'string' ? parseFloat(lng) : Number(lng);\n\n  // 유효성 검사\n  if (!isValidCoordinate(parsedLat) || !isValidCoordinate(parsedLng)) {\n    console.error('Invalid coordinates:', {\n      original: {\n        lat,\n        lng\n      },\n      parsed: {\n        lat: parsedLat,\n        lng: parsedLng\n      }\n    });\n    return null;\n  }\n\n  // 좌표 범위 검사\n  if (parsedLat < -90 || parsedLat > 90 || parsedLng < -180 || parsedLng > 180) {\n    console.error('Coordinates out of range:', {\n      lat: parsedLat,\n      lng: parsedLng\n    });\n    return null;\n  }\n  return {\n    lat: parsedLat,\n    lng: parsedLng\n  };\n};","map":{"version":3,"names":["isValidCoordinate","value","num","Number","isNaN","isFinite","parseCoordinates","lat","lng","console","log","type","parsedLat","parseFloat","parsedLng","error","original","parsed"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/utils/coordinates.js"],"sourcesContent":["// src/utils/coordinates.js\nexport const isValidCoordinate = (value) => {\n    const num = Number(value);\n    return !isNaN(num) && isFinite(num);\n  };\n  \n  export const parseCoordinates = (lat, lng) => {\n    // 입력값 타입 로깅\n    console.log('Parsing coordinates:', { \n      lat: { value: lat, type: typeof lat }, \n      lng: { value: lng, type: typeof lng }\n    });\n  \n    // 문자열인 경우 숫자로 변환\n    const parsedLat = typeof lat === 'string' ? parseFloat(lat) : Number(lat);\n    const parsedLng = typeof lng === 'string' ? parseFloat(lng) : Number(lng);\n  \n    // 유효성 검사\n    if (!isValidCoordinate(parsedLat) || !isValidCoordinate(parsedLng)) {\n      console.error('Invalid coordinates:', { \n        original: { lat, lng }, \n        parsed: { lat: parsedLat, lng: parsedLng }\n      });\n      return null;\n    }\n  \n    // 좌표 범위 검사\n    if (parsedLat < -90 || parsedLat > 90 || parsedLng < -180 || parsedLng > 180) {\n      console.error('Coordinates out of range:', { lat: parsedLat, lng: parsedLng });\n      return null;\n    }\n  \n    return {\n      lat: parsedLat,\n      lng: parsedLng\n    };\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,iBAAiB,GAAIC,KAAK,IAAK;EACxC,MAAMC,GAAG,GAAGC,MAAM,CAACF,KAAK,CAAC;EACzB,OAAO,CAACG,KAAK,CAACF,GAAG,CAAC,IAAIG,QAAQ,CAACH,GAAG,CAAC;AACrC,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC5C;EACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE;IAClCH,GAAG,EAAE;MAAEN,KAAK,EAAEM,GAAG;MAAEI,IAAI,EAAE,OAAOJ;IAAI,CAAC;IACrCC,GAAG,EAAE;MAAEP,KAAK,EAAEO,GAAG;MAAEG,IAAI,EAAE,OAAOH;IAAI;EACtC,CAAC,CAAC;;EAEF;EACA,MAAMI,SAAS,GAAG,OAAOL,GAAG,KAAK,QAAQ,GAAGM,UAAU,CAACN,GAAG,CAAC,GAAGJ,MAAM,CAACI,GAAG,CAAC;EACzE,MAAMO,SAAS,GAAG,OAAON,GAAG,KAAK,QAAQ,GAAGK,UAAU,CAACL,GAAG,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAC;;EAEzE;EACA,IAAI,CAACR,iBAAiB,CAACY,SAAS,CAAC,IAAI,CAACZ,iBAAiB,CAACc,SAAS,CAAC,EAAE;IAClEL,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAE;MACpCC,QAAQ,EAAE;QAAET,GAAG;QAAEC;MAAI,CAAC;MACtBS,MAAM,EAAE;QAAEV,GAAG,EAAEK,SAAS;QAAEJ,GAAG,EAAEM;MAAU;IAC3C,CAAC,CAAC;IACF,OAAO,IAAI;EACb;;EAEA;EACA,IAAIF,SAAS,GAAG,CAAC,EAAE,IAAIA,SAAS,GAAG,EAAE,IAAIE,SAAS,GAAG,CAAC,GAAG,IAAIA,SAAS,GAAG,GAAG,EAAE;IAC5EL,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAE;MAAER,GAAG,EAAEK,SAAS;MAAEJ,GAAG,EAAEM;IAAU,CAAC,CAAC;IAC9E,OAAO,IAAI;EACb;EAEA,OAAO;IACLP,GAAG,EAAEK,SAAS;IACdJ,GAAG,EAAEM;EACP,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}