{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import MessageBubble from'./MessageBubble';import ChatInput from'./ChatInput';import'./Chat.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const INITIAL_MESSAGE={id:'initial',type:'assistant',content:'안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요'};const INITIAL_RECOMMENDATIONS=['운동 후 근육통을 줄이는 방법을 알려줘.','가까운 공원에서 할 수 있는 운동을 추천해줘.','가벼운 운동부터 시작하려면 뭘 하면 좋을까?'];const ChatContainer=()=>{const[messages,setMessages]=useState([INITIAL_MESSAGE]);const[loading,setLoading]=useState(false);const[threadId,setThreadId]=useState(null);const[recommendations,setRecommendations]=useState(INITIAL_RECOMMENDATIONS);const[hasUserSentMessage,setHasUserSentMessage]=useState(false);const messagesEndRef=useRef(null);const API_BASE_URL=process.env.REACT_APP_BASE_URL;const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};useEffect(()=>{const startChat=async()=>{try{setLoading(true);const startResponse=await fetch(`${API_BASE_URL}/chat/start`,{method:'POST',headers:{'Content-Type':'application/json','Accept':'*/*'}});if(!startResponse.ok){throw new Error('Failed to start chat');}const data=await startResponse.json();setThreadId(data.id);}catch(error){console.error('Chat initialization failed:',error);}finally{setLoading(false);}};startChat();},[API_BASE_URL]);useEffect(()=>{scrollToBottom();},[messages]);const handleSuggestedQuestion=question=>{sendMessage(question);};const parseResponse=responseText=>{try{// JSON 형식에서 코드 블록 제거\nconst cleanText=responseText.replace(/```json\\n|\\n```/g,'');return JSON.parse(cleanText);}catch(error){console.error('Failed to parse response:',error);return null;}};const sendMessage=async text=>{if(!text.trim()||loading||!threadId)return;try{setLoading(true);setHasUserSentMessage(true);setMessages(prev=>[...prev,{id:Date.now(),type:'user',content:text}]);const sendResponse=await fetch(`${API_BASE_URL}/chat/send`,{method:'POST',headers:{'Content-Type':'application/json','Accept':'*/*'},body:JSON.stringify({threadId,prompt:text})});if(!sendResponse.ok){throw new Error('Failed to send message');}const responseText=await sendResponse.text();const responseData=parseResponse(responseText);if(responseData){if(responseData.answer&&responseData.answer.length>0){setMessages(prev=>[...prev,{id:Date.now()+1,type:'assistant',content:responseData.answer.join('\\n')}]);}if(hasUserSentMessage){if(responseData.recommand&&responseData.recommand.length>0){setRecommendations(responseData.recommand);}else{setRecommendations([]);}}}else{setMessages(prev=>[...prev,{id:Date.now()+1,type:'assistant',content:responseText}]);if(hasUserSentMessage){setRecommendations([]);}}}catch(error){console.error('Failed to send message:',error);setMessages(prev=>[...prev,{id:Date.now()+1,type:'assistant',content:'죄송합니다. 메시지 전송 중 오류가 발생했습니다.'}]);if(hasUserSentMessage){setRecommendations([]);}}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[messages.map(message=>/*#__PURE__*/_jsx(MessageBubble,{type:message.type,content:message.content},message.id)),!loading&&recommendations.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"suggested-questions\",children:recommendations.map((question,index)=>/*#__PURE__*/_jsx(\"button\",{className:\"suggested-question-btn\",onClick:()=>handleSuggestedQuestion(question),children:question},index))}),loading&&/*#__PURE__*/_jsxs(\"div\",{className:\"typing-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsx(ChatInput,{onSend:sendMessage,disabled:loading})]});};export default ChatContainer;","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageBubble","ChatInput","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","INITIAL_MESSAGE","id","type","content","INITIAL_RECOMMENDATIONS","ChatContainer","messages","setMessages","loading","setLoading","threadId","setThreadId","recommendations","setRecommendations","hasUserSentMessage","setHasUserSentMessage","messagesEndRef","API_BASE_URL","process","env","REACT_APP_BASE_URL","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","startChat","startResponse","fetch","method","headers","ok","Error","data","json","error","console","handleSuggestedQuestion","question","sendMessage","parseResponse","responseText","cleanText","replace","JSON","parse","text","trim","prev","Date","now","sendResponse","body","stringify","prompt","responseData","answer","length","join","recommand","children","className","map","message","index","onClick","ref","onSend","disabled"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport './Chat.css';\n\nconst INITIAL_MESSAGE = {\n  id: 'initial',\n  type: 'assistant',\n  content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요'\n};\n\nconst INITIAL_RECOMMENDATIONS = [\n  '운동 후 근육통을 줄이는 방법을 알려줘.',\n  '가까운 공원에서 할 수 있는 운동을 추천해줘.',\n  '가벼운 운동부터 시작하려면 뭘 하면 좋을까?'\n];\n\nconst ChatContainer = () => {\n  const [messages, setMessages] = useState([INITIAL_MESSAGE]);\n  const [loading, setLoading] = useState(false);\n  const [threadId, setThreadId] = useState(null);\n  const [recommendations, setRecommendations] = useState(INITIAL_RECOMMENDATIONS);\n  const [hasUserSentMessage, setHasUserSentMessage] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  const API_BASE_URL = process.env.REACT_APP_BASE_URL;\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    const startChat = async () => {\n      try {\n        setLoading(true);\n        const startResponse = await fetch(`${API_BASE_URL}/chat/start`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': '*/*'\n          }\n        });\n\n        if (!startResponse.ok) {\n          throw new Error('Failed to start chat');\n        }\n\n        const data = await startResponse.json();\n        setThreadId(data.id);\n      } catch (error) {\n        console.error('Chat initialization failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    startChat();\n  }, [API_BASE_URL]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSuggestedQuestion = (question) => {\n    sendMessage(question);\n  };\n\n  const parseResponse = (responseText) => {\n    try {\n      // JSON 형식에서 코드 블록 제거\n      const cleanText = responseText.replace(/```json\\n|\\n```/g, '');\n      return JSON.parse(cleanText);\n    } catch (error) {\n      console.error('Failed to parse response:', error);\n      return null;\n    }\n  };\n\n  const sendMessage = async (text) => {\n    if (!text.trim() || loading || !threadId) return;\n\n    try {\n      setLoading(true);\n      setHasUserSentMessage(true);\n\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n\n      const sendResponse = await fetch(`${API_BASE_URL}/chat/send`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*'\n        },\n        body: JSON.stringify({\n          threadId,\n          prompt: text\n        })\n      });\n\n      if (!sendResponse.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      const responseText = await sendResponse.text();\n      const responseData = parseResponse(responseText);\n\n      if (responseData) {\n        if (responseData.answer && responseData.answer.length > 0) {\n          setMessages(prev => [...prev, {\n            id: Date.now() + 1,\n            type: 'assistant',\n            content: responseData.answer.join('\\n')\n          }]);\n        }\n\n        if (hasUserSentMessage) {\n          if (responseData.recommand && responseData.recommand.length > 0) {\n            setRecommendations(responseData.recommand);\n          } else {\n            setRecommendations([]);\n          }\n        }\n      } else {\n        setMessages(prev => [...prev, {\n          id: Date.now() + 1,\n          type: 'assistant',\n          content: responseText\n        }]);\n        if (hasUserSentMessage) {\n          setRecommendations([]);\n        }\n      }\n\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: '죄송합니다. 메시지 전송 중 오류가 발생했습니다.'\n      }]);\n      if (hasUserSentMessage) {\n        setRecommendations([]);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"chat-messages\">\n        {messages.map(message => (\n          <MessageBubble\n            key={message.id}\n            type={message.type}\n            content={message.content}\n          />\n        ))}\n        {!loading && recommendations.length > 0 && (\n          <div className=\"suggested-questions\">\n            {recommendations.map((question, index) => (\n              <button\n                key={index}\n                className=\"suggested-question-btn\"\n                onClick={() => handleSuggestedQuestion(question)}\n              >\n                {question}\n              </button>\n            ))}\n          </div>\n        )}\n        {loading && (\n          <div className=\"typing-indicator\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <ChatInput onSend={sendMessage} disabled={loading} />\n    </>\n  );\n};\n\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}