{"ast":null,"code":"var _jsxFileName = \"/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js\",\n  _s = $RefreshSig$();\n// ChatContainer.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [threadId, setThreadId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    const startChat = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:8080/chat/start', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) throw new Error('채팅 시작 실패');\n        const data = await response.json();\n        setThreadId(data.id);\n        setMessages([{\n          id: 'initial',\n          type: 'assistant',\n          content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요\\n무엇을 도와드릴까요?'\n        }]);\n      } catch (error) {\n        console.error('Chat initialization failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    startChat();\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const sendMessage = async text => {\n    if (!threadId || !text.trim()) return;\n    try {\n      setLoading(true);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n      const sendResponse = await fetch('http://localhost:8080/chat/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          threadId,\n          prompt: text\n        })\n      });\n      if (!sendResponse.ok) throw new Error('메시지 전송 실패');\n      const getResponse = await fetch(`http://localhost:8080/chat?threadId=${threadId}`);\n      if (!getResponse.ok) throw new Error('응답 조회 실패');\n      const data = await getResponse.json();\n      const lastMessage = data.data[data.data.length - 1];\n      setMessages(prev => [...prev, {\n        id: lastMessage.id,\n        type: 'assistant',\n        content: lastMessage.content[0].text.value\n      }]);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'assistant',\n        content: '죄송합니다. 메시지 전송 중 오류가 발생했습니다.'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages-container\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        type: message.type,\n        content: message.content\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSend: sendMessage,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"C6zSFNC2oztAb6rEkRwrVkRvOwI=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageBubble","ChatInput","LoadingSpinner","jsxDEV","_jsxDEV","ChatContainer","_s","messages","setMessages","threadId","setThreadId","loading","setLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","startChat","response","fetch","method","headers","ok","Error","data","json","id","type","content","error","console","sendMessage","text","trim","prev","Date","now","sendResponse","body","JSON","stringify","prompt","getResponse","lastMessage","length","value","className","children","map","message","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSend","disabled","_c","$RefreshReg$"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js"],"sourcesContent":["// ChatContainer.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst ChatContainer = () => {\n  const [messages, setMessages] = useState([]);\n  const [threadId, setThreadId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    const startChat = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:8080/chat/start', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' }\n        });\n        \n        if (!response.ok) throw new Error('채팅 시작 실패');\n        \n        const data = await response.json();\n        setThreadId(data.id);\n        \n        setMessages([{\n          id: 'initial',\n          type: 'assistant',\n          content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요\\n무엇을 도와드릴까요?'\n        }]);\n      } catch (error) {\n        console.error('Chat initialization failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    startChat();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async (text) => {\n    if (!threadId || !text.trim()) return;\n\n    try {\n      setLoading(true);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n\n      const sendResponse = await fetch('http://localhost:8080/chat/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          threadId,\n          prompt: text\n        })\n      });\n\n      if (!sendResponse.ok) throw new Error('메시지 전송 실패');\n\n      const getResponse = await fetch(`http://localhost:8080/chat?threadId=${threadId}`);\n      if (!getResponse.ok) throw new Error('응답 조회 실패');\n\n      const data = await getResponse.json();\n      const lastMessage = data.data[data.data.length - 1];\n      \n      setMessages(prev => [...prev, {\n        id: lastMessage.id,\n        type: 'assistant',\n        content: lastMessage.content[0].text.value\n      }]);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'assistant',\n        content: '죄송합니다. 메시지 전송 중 오류가 발생했습니다.'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-messages-container\">\n        {messages.map(message => (\n          <MessageBubble\n            key={message.id}\n            type={message.type}\n            content={message.content}\n          />\n        ))}\n        {loading && <LoadingSpinner />}\n        <div ref={messagesEndRef} />\n      </div>\n      <ChatInput onSend={sendMessage} disabled={loading} />\n    </div>\n  );\n};\n\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}