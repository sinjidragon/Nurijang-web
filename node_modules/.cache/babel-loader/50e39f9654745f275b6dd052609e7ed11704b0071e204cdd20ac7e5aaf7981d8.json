{"ast":null,"code":"export const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!(searchText !== null && searchText !== void 0 && searchText.trim())) return null;\n\n    // location 객체 검증\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    // 응답 데이터 로깅\n    console.log('Raw suggestions response:', data);\n\n    // 데이터 구조 검증 및 처리\n    const processedData = {\n      mainItems: Array.isArray(data.mainItems) ? data.mainItems : [],\n      facilities: Array.isArray(data.facilities) ? data.facilities.map(facility => {\n        // 시설물 데이터 검증 및 가공\n        const processedFacility = validateFacility(facility);\n\n        // 거리 계산\n        if (location && processedFacility.fcltyCrdntLa && processedFacility.fcltyCrdntLo) {\n          const distance = calculateDistance(location.lat, location.lng, Number(processedFacility.fcltyCrdntLa), Number(processedFacility.fcltyCrdntLo));\n          processedFacility.distance = distance;\n        }\n        return processedFacility;\n      }).sort((a, b) => (a.distance || 0) - (b.distance || 0)) : []\n    };\n    console.log('Processed suggestions:', processedData);\n    return processedData;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};\n\n// validateFacility 함수 수정\nconst validateFacility = facility => {\n  var _facility$fcltyNm;\n  // 기본 구조 확인을 위한 로깅\n  console.log('Validating facility:', facility);\n  return {\n    id: facility.id || 0,\n    fcltyCrdntLa: Number(facility.fcltyCrdntLa || 0),\n    fcltyCrdntLo: Number(facility.fcltyCrdntLo || 0),\n    fcltyNm: ((_facility$fcltyNm = facility.fcltyNm) === null || _facility$fcltyNm === void 0 ? void 0 : _facility$fcltyNm.replace('location_on', '').trim()) || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    fcltyDetailAddr: facility.fcltyDetailAddr || '',\n    rprsntvTelNo: facility.rprsntvTelNo || '',\n    distance: facility.distance || 0\n  };\n};","map":{"version":3,"names":["fetchSuggestions","searchText","location","trim","lat","lng","console","error","response","fetch","base_url","method","headers","body","JSON","stringify","fcltyCrdntLo","Number","toFixed","fcltyCrdntLa","ok","Error","data","json","log","processedData","mainItems","Array","isArray","facilities","map","facility","processedFacility","validateFacility","distance","calculateDistance","sort","a","b","_facility$fcltyNm","id","fcltyNm","replace","fcltyAddr","fcltyDetailAddr","rprsntvTelNo"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/services/api.js"],"sourcesContent":["export const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!searchText?.trim()) return null;\n\n    // location 객체 검증\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    // 응답 데이터 로깅\n    console.log('Raw suggestions response:', data);\n\n    // 데이터 구조 검증 및 처리\n    const processedData = {\n      mainItems: Array.isArray(data.mainItems) ? data.mainItems : [],\n      facilities: Array.isArray(data.facilities) ? data.facilities.map(facility => {\n        // 시설물 데이터 검증 및 가공\n        const processedFacility = validateFacility(facility);\n        \n        // 거리 계산\n        if (location && processedFacility.fcltyCrdntLa && processedFacility.fcltyCrdntLo) {\n          const distance = calculateDistance(\n            location.lat,\n            location.lng,\n            Number(processedFacility.fcltyCrdntLa),\n            Number(processedFacility.fcltyCrdntLo)\n          );\n          processedFacility.distance = distance;\n        }\n\n        return processedFacility;\n      }).sort((a, b) => (a.distance || 0) - (b.distance || 0)) : []\n    };\n\n    console.log('Processed suggestions:', processedData);\n    return processedData;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};\n\n// validateFacility 함수 수정\nconst validateFacility = (facility) => {\n  // 기본 구조 확인을 위한 로깅\n  console.log('Validating facility:', facility);\n\n  return {\n    id: facility.id || 0,\n    fcltyCrdntLa: Number(facility.fcltyCrdntLa || 0),\n    fcltyCrdntLo: Number(facility.fcltyCrdntLo || 0),\n    fcltyNm: facility.fcltyNm?.replace('location_on', '').trim() || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    fcltyDetailAddr: facility.fcltyDetailAddr || '',\n    rprsntvTelNo: facility.rprsntvTelNo || '',\n    distance: facility.distance || 0\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}