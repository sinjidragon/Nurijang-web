{"ast":null,"code":"// src/services/api.js\nexport const fetchNearbyFacilities = async location => {\n  try {\n    const response = await fetch('/facilities', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    return response.json();\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!(searchText !== null && searchText !== void 0 && searchText.trim())) return null;\n    const response = await fetch('/suggestions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    return response.json();\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};\nexport const searchFacilities = async params => {\n  try {\n    const {\n      searchType,\n      searchText,\n      location\n    } = params;\n    const url = searchType === 'item' ? '/search-item' : '/search';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    return response.json();\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchNearbyFacilities","location","response","fetch","method","headers","body","JSON","stringify","fcltyCrdntLo","Number","lng","toFixed","fcltyCrdntLa","lat","ok","Error","json","error","console","fetchSuggestions","searchText","trim","searchFacilities","params","searchType","url"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/services/api.js"],"sourcesContent":["// src/services/api.js\nexport const fetchNearbyFacilities = async (location) => {\n    try {\n      const response = await fetch('/facilities', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fcltyCrdntLo: Number(location.lng).toFixed(6),\n          fcltyCrdntLa: Number(location.lat).toFixed(6)\n        })\n      });\n  \n      if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n      return response.json();\n    } catch (error) {\n      console.error('Facilities fetch error:', error);\n      throw error;\n    }\n  };\n  \n  export const fetchSuggestions = async (searchText, location) => {\n    try {\n      if (!searchText?.trim()) return null;\n      \n      const response = await fetch('/suggestions', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fcltyCrdntLo: Number(location.lng).toFixed(6),\n          fcltyCrdntLa: Number(location.lat).toFixed(6),\n          searchText: searchText.trim()\n        })\n      });\n  \n      if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n      return response.json();\n    } catch (error) {\n      console.error('Suggestions fetch error:', error);\n      throw error;\n    }\n  };\n  \n  export const searchFacilities = async (params) => {\n    try {\n      const { searchType, searchText, location } = params;\n      const url = searchType === 'item' ? '/search-item' : '/search';\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fcltyCrdntLo: Number(location.lng).toFixed(6),\n          fcltyCrdntLa: Number(location.lat).toFixed(6),\n          searchText: searchText.trim()\n        })\n      });\n  \n      if (!response.ok) throw new Error('검색에 실패했습니다.');\n      return response.json();\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}