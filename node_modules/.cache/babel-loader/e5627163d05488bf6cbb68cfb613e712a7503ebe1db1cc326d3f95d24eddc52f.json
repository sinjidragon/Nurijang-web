{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useSearch = userLocation => {\n  _s();\n  // userLocation props 추가\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState(null);\n  const [showSearchPanel, setShowSearchPanel] = useState(false);\n  const searchPanelRef = useRef(null);\n\n  // 검색 결과를 가져올 때 위치 정보 포함\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (searchPanelRef.current && !searchPanelRef.current.contains(event.target)) {\n        setShowSearchPanel(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // suggestions를 설정할 때 위치 정보 포함\n  const setSuggestionsWithLocation = facilities => {\n    if (!facilities) {\n      setSuggestions(null);\n      return;\n    }\n\n    // 현재 위치가 있는 경우에만 거리 계산\n    if (userLocation) {\n      const facilitiesWithDistance = facilities.map(facility => ({\n        ...facility,\n        distance: calculateDistance(userLocation.lat, userLocation.lng, facility.fcltyCrdntLa, facility.fcltyCrdntLo)\n      }));\n\n      // 거리순으로 정렬\n      facilitiesWithDistance.sort((a, b) => a.distance - b.distance);\n      setSuggestions(facilitiesWithDistance);\n    } else {\n      setSuggestions(facilities);\n    }\n  };\n  const resetSearchPanel = () => {\n    setShowSearchPanel(false);\n  };\n  return {\n    searchText,\n    setSearchText,\n    suggestions,\n    setSuggestions: setSuggestionsWithLocation,\n    // 수정된 setter 사용\n    showSearchPanel,\n    setShowSearchPanel,\n    searchPanelRef,\n    resetSearchPanel\n  };\n};\n\n// 거리 계산 함수 (Haversine formula)\n_s(useSearch, \"Oj/56eBoe3OVXTJlltl2qGstwt4=\");\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // 킬로미터 단위 거리\n}\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}","map":{"version":3,"names":["useState","useEffect","useRef","useSearch","userLocation","_s","searchText","setSearchText","suggestions","setSuggestions","showSearchPanel","setShowSearchPanel","searchPanelRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","setSuggestionsWithLocation","facilities","facilitiesWithDistance","map","facility","distance","calculateDistance","lat","lng","fcltyCrdntLa","fcltyCrdntLo","sort","a","b","resetSearchPanel","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","deg","PI"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/hooks/useSearch.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useSearch = (userLocation) => {  // userLocation props 추가\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState(null);\n  const [showSearchPanel, setShowSearchPanel] = useState(false);\n  const searchPanelRef = useRef(null);\n\n  // 검색 결과를 가져올 때 위치 정보 포함\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (searchPanelRef.current && !searchPanelRef.current.contains(event.target)) {\n        setShowSearchPanel(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // suggestions를 설정할 때 위치 정보 포함\n  const setSuggestionsWithLocation = (facilities) => {\n    if (!facilities) {\n      setSuggestions(null);\n      return;\n    }\n\n    // 현재 위치가 있는 경우에만 거리 계산\n    if (userLocation) {\n      const facilitiesWithDistance = facilities.map(facility => ({\n        ...facility,\n        distance: calculateDistance(\n          userLocation.lat,\n          userLocation.lng,\n          facility.fcltyCrdntLa,\n          facility.fcltyCrdntLo\n        )\n      }));\n      \n      // 거리순으로 정렬\n      facilitiesWithDistance.sort((a, b) => a.distance - b.distance);\n      setSuggestions(facilitiesWithDistance);\n    } else {\n      setSuggestions(facilities);\n    }\n  };\n\n  const resetSearchPanel = () => {\n    setShowSearchPanel(false);\n  };\n\n  return {\n    searchText,\n    setSearchText,\n    suggestions,\n    setSuggestions: setSuggestionsWithLocation,  // 수정된 setter 사용\n    showSearchPanel,\n    setShowSearchPanel,\n    searchPanelRef,\n    resetSearchPanel\n  };\n};\n\n// 거리 계산 함수 (Haversine formula)\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c; // 킬로미터 단위 거리\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI/180);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}