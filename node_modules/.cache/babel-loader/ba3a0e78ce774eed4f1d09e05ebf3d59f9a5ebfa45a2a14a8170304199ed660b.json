{"ast":null,"code":"var _jsxFileName = \"/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js\",\n  _s = $RefreshSig$();\n// ChatContainer.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst INITIAL_MESSAGE = {\n  id: 'initial',\n  type: 'assistant',\n  content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요'\n};\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([INITIAL_MESSAGE]);\n  const [loading, setLoading] = useState(false);\n  const [threadId, setThreadId] = useState(null);\n  const [recommendations, setRecommendations] = useState([]);\n  const messagesEndRef = useRef(null);\n  const API_BASE_URL = 'http://3.35.98.48:8080';\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    const startChat = async () => {\n      try {\n        setLoading(true);\n        const startResponse = await fetch(`${API_BASE_URL}/chat/start`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': '*/*'\n          }\n        });\n        if (!startResponse.ok) {\n          throw new Error('Failed to start chat');\n        }\n        const data = await startResponse.json();\n        setThreadId(data.id);\n      } catch (error) {\n        console.error('Chat initialization failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    startChat();\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSuggestedQuestion = question => {\n    sendMessage(question);\n  };\n  const sendMessage = async text => {\n    if (!text.trim() || loading || !threadId) return;\n    try {\n      setLoading(true);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n      const sendResponse = await fetch(`${API_BASE_URL}/chat/send`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*'\n        },\n        body: JSON.stringify({\n          threadId,\n          prompt: text\n        })\n      });\n      if (!sendResponse.ok) {\n        throw new Error('Failed to send message');\n      }\n      const responseData = await sendResponse.json();\n\n      // 응답 메시지 추가\n      if (responseData.answer && responseData.answer.length > 0) {\n        setMessages(prev => [...prev, {\n          id: Date.now() + 1,\n          type: 'assistant',\n          content: responseData.answer.join('\\n')\n        }]);\n      }\n\n      // 추천 질문 업데이트\n      if (responseData.recommend && responseData.recommend.length > 0) {\n        setRecommendations(responseData.recommend);\n      } else {\n        setRecommendations([]);\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: '죄송합니다. 메시지 전송 중 오류가 발생했습니다.'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        type: message.type,\n        content: message.content\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)), recommendations.length > 0 && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggested-questions\",\n        children: recommendations.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"suggested-question-btn\",\n          onClick: () => handleSuggestedQuestion(question),\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSend: sendMessage,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatContainer, \"EBTFYL2E4qKJHGTMoY4JI1KkZAk=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageBubble","ChatInput","jsxDEV","_jsxDEV","Fragment","_Fragment","INITIAL_MESSAGE","id","type","content","ChatContainer","_s","messages","setMessages","loading","setLoading","threadId","setThreadId","recommendations","setRecommendations","messagesEndRef","API_BASE_URL","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","startChat","startResponse","fetch","method","headers","ok","Error","data","json","error","console","handleSuggestedQuestion","question","sendMessage","text","trim","prev","Date","now","sendResponse","body","JSON","stringify","prompt","responseData","answer","length","join","recommend","children","className","map","message","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","ref","onSend","disabled","_c","$RefreshReg$"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/components/ChatContainer.js"],"sourcesContent":["// ChatContainer.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageBubble from './MessageBubble';\nimport ChatInput from './ChatInput';\nimport './Chat.css';\n\nconst INITIAL_MESSAGE = {\n  id: 'initial',\n  type: 'assistant',\n  content: '안녕하세요! AI 누리입니다.\\n실시간으로 유익한 맞춤형 답변을 제공해요'\n};\n\nconst ChatContainer = () => {\n  const [messages, setMessages] = useState([INITIAL_MESSAGE]);\n  const [loading, setLoading] = useState(false);\n  const [threadId, setThreadId] = useState(null);\n  const [recommendations, setRecommendations] = useState([]);\n  const messagesEndRef = useRef(null);\n  \n  const API_BASE_URL = 'http://3.35.98.48:8080';\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    const startChat = async () => {\n      try {\n        setLoading(true);\n        const startResponse = await fetch(`${API_BASE_URL}/chat/start`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': '*/*'\n          }\n        });\n\n        if (!startResponse.ok) {\n          throw new Error('Failed to start chat');\n        }\n\n        const data = await startResponse.json();\n        setThreadId(data.id);\n      } catch (error) {\n        console.error('Chat initialization failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    startChat();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSuggestedQuestion = (question) => {\n    sendMessage(question);\n  };\n\n  const sendMessage = async (text) => {\n    if (!text.trim() || loading || !threadId) return;\n\n    try {\n      setLoading(true);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        type: 'user',\n        content: text\n      }]);\n\n      const sendResponse = await fetch(`${API_BASE_URL}/chat/send`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': '*/*'\n        },\n        body: JSON.stringify({\n          threadId,\n          prompt: text\n        })\n      });\n\n      if (!sendResponse.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      const responseData = await sendResponse.json();\n      \n      // 응답 메시지 추가\n      if (responseData.answer && responseData.answer.length > 0) {\n        setMessages(prev => [...prev, {\n          id: Date.now() + 1,\n          type: 'assistant',\n          content: responseData.answer.join('\\n')\n        }]);\n      }\n\n      // 추천 질문 업데이트\n      if (responseData.recommend && responseData.recommend.length > 0) {\n        setRecommendations(responseData.recommend);\n      } else {\n        setRecommendations([]);\n      }\n\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: '죄송합니다. 메시지 전송 중 오류가 발생했습니다.'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"chat-messages\">\n        {messages.map(message => (\n          <MessageBubble\n            key={message.id}\n            type={message.type}\n            content={message.content}\n          />\n        ))}\n        {recommendations.length > 0 && !loading && (\n          <div className=\"suggested-questions\">\n            {recommendations.map((question, index) => (\n              <button\n                key={index}\n                className=\"suggested-question-btn\"\n                onClick={() => handleSuggestedQuestion(question)}\n              >\n                {question}\n              </button>\n            ))}\n          </div>\n        )}\n        {loading && (\n          <div className=\"typing-indicator\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <ChatInput onSend={sendMessage} disabled={loading} />\n    </>\n  );\n};\n\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}