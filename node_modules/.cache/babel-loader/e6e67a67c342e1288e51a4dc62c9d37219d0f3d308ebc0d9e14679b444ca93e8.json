{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useEffect } from 'react';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\n\n// SVG 클러스터 아이콘 생성 함수\nconst createSvgClusterIcon = (size, color, opacity) => {\n  const svg = `\n    <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 ${size} ${size}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle\n        cx=\"${size / 2}\"\n        cy=\"${size / 2}\"\n        r=\"${size / 2 - 2}\"\n        fill=\"${color}\"\n        fill-opacity=\"${opacity}\"\n        stroke=\"white\"\n        stroke-width=\"2\"\n      />\n    </svg>\n  `;\n  return 'data:image/svg+xml;base64,' + btoa(svg);\n};\nconst useMarkerClusterer = ({\n  mapRef,\n  facilities,\n  setSelectedFacility,\n  markerIcon\n}) => {\n  _s();\n  const clustererRef = useRef(null);\n  useEffect(() => {\n    var _mapRef$current, _mapRef$current$state, _window$google, _window$google$maps, _window$google$maps$m;\n    // Google Maps API가 완전히 로드되었는지 확인\n    if (!((_mapRef$current = mapRef.current) !== null && _mapRef$current !== void 0 && (_mapRef$current$state = _mapRef$current.state) !== null && _mapRef$current$state !== void 0 && _mapRef$current$state.map) || !((_window$google = window.google) !== null && _window$google !== void 0 && (_window$google$maps = _window$google.maps) !== null && _window$google$maps !== void 0 && (_window$google$maps$m = _window$google$maps.marker) !== null && _window$google$maps$m !== void 0 && _window$google$maps$m.AdvancedMarkerElement)) {\n      return;\n    }\n    const map = mapRef.current.state.map;\n    if (clustererRef.current) {\n      clustererRef.current.clearMarkers();\n    }\n\n    // Renderer for custom cluster styling\n    const customRenderer = {\n      render: ({\n        count,\n        position\n      }) => {\n        // Determine cluster size based on marker count\n        let size, color, opacity;\n        if (count < 10) {\n          size = 40;\n          color = '#596FB7';\n          opacity = 0.95;\n        } else if (count < 50) {\n          size = 50;\n          color = '#11235A';\n          opacity = 0.95;\n        } else {\n          size = 60;\n          color = '#11235A';\n          opacity = 1;\n        }\n\n        // Create marker element\n        const element = document.createElement('div');\n        element.innerHTML = `\n          <div style=\"\n            width: ${size}px;\n            height: ${size}px;\n            background-image: url('${createSvgClusterIcon(size, color, opacity)}');\n            background-size: contain;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: ${count < 10 ? '13' : count < 50 ? '14' : '16'}px;\n            font-weight: 500;\n          \">\n            ${count}\n          </div>\n        `;\n\n        // Create and return the advanced marker\n        return new window.google.maps.marker.AdvancedMarkerElement({\n          position,\n          content: element\n        });\n      }\n    };\n    const validFacilityMarkers = facilities.filter(facility => facility.fcltyCrdntLa !== 0 && facility.fcltyCrdntLo !== 0).map(facility => {\n      // Create marker element with custom icon\n      const element = document.createElement('div');\n      element.innerHTML = `\n          <img src=\"${markerIcon}\" alt=\"facility marker\" style=\"width: 24px; height: 24px;\">\n        `;\n      const marker = new window.google.maps.marker.AdvancedMarkerElement({\n        position: {\n          lat: Number(facility.fcltyCrdntLa),\n          lng: Number(facility.fcltyCrdntLo)\n        },\n        content: element\n      });\n\n      // Add click listener\n      marker.addListener('click', () => {\n        setSelectedFacility(facility);\n      });\n      return marker;\n    });\n\n    // Create new clusterer with custom renderer\n    clustererRef.current = new MarkerClusterer({\n      map,\n      markers: validFacilityMarkers,\n      renderer: customRenderer,\n      gridSize: 60,\n      maxZoom: 15,\n      zIndex: 1\n    });\n    return () => {\n      if (clustererRef.current) {\n        clustererRef.current.clearMarkers();\n      }\n    };\n  }, [facilities, mapRef, setSelectedFacility, markerIcon]);\n  return clustererRef;\n};\n_s(useMarkerClusterer, \"IMRUIXsUmwVJPmbaT4ErJRM7+ik=\");\nexport default useMarkerClusterer;","map":{"version":3,"names":["useRef","useEffect","MarkerClusterer","createSvgClusterIcon","size","color","opacity","svg","btoa","useMarkerClusterer","mapRef","facilities","setSelectedFacility","markerIcon","_s","clustererRef","_mapRef$current","_mapRef$current$state","_window$google","_window$google$maps","_window$google$maps$m","current","state","map","window","google","maps","marker","AdvancedMarkerElement","clearMarkers","customRenderer","render","count","position","element","document","createElement","innerHTML","content","validFacilityMarkers","filter","facility","fcltyCrdntLa","fcltyCrdntLo","lat","Number","lng","addListener","markers","renderer","gridSize","maxZoom","zIndex"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/hooks/useMarkerClusterer.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\n\n// SVG 클러스터 아이콘 생성 함수\nconst createSvgClusterIcon = (size, color, opacity) => {\n  const svg = `\n    <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 ${size} ${size}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle\n        cx=\"${size/2}\"\n        cy=\"${size/2}\"\n        r=\"${size/2 - 2}\"\n        fill=\"${color}\"\n        fill-opacity=\"${opacity}\"\n        stroke=\"white\"\n        stroke-width=\"2\"\n      />\n    </svg>\n  `;\n  return 'data:image/svg+xml;base64,' + btoa(svg);\n};\n\nconst useMarkerClusterer = ({\n  mapRef,\n  facilities,\n  setSelectedFacility,\n  markerIcon\n}) => {\n  const clustererRef = useRef(null);\n\n  useEffect(() => {\n    // Google Maps API가 완전히 로드되었는지 확인\n    if (!mapRef.current?.state?.map || \n        !window.google?.maps?.marker?.AdvancedMarkerElement) {\n      return;\n    }\n\n    const map = mapRef.current.state.map;\n    \n    if (clustererRef.current) {\n      clustererRef.current.clearMarkers();\n    }\n\n    // Renderer for custom cluster styling\n    const customRenderer = {\n      render: ({ count, position }) => {\n        // Determine cluster size based on marker count\n        let size, color, opacity;\n        if (count < 10) {\n          size = 40;\n          color = '#596FB7';\n          opacity = 0.95;\n        } else if (count < 50) {\n          size = 50;\n          color = '#11235A';\n          opacity = 0.95;\n        } else {\n          size = 60;\n          color = '#11235A';\n          opacity = 1;\n        }\n\n        // Create marker element\n        const element = document.createElement('div');\n        element.innerHTML = `\n          <div style=\"\n            width: ${size}px;\n            height: ${size}px;\n            background-image: url('${createSvgClusterIcon(size, color, opacity)}');\n            background-size: contain;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: ${count < 10 ? '13' : count < 50 ? '14' : '16'}px;\n            font-weight: 500;\n          \">\n            ${count}\n          </div>\n        `;\n\n        // Create and return the advanced marker\n        return new window.google.maps.marker.AdvancedMarkerElement({\n          position,\n          content: element\n        });\n      }\n    };\n\n    const validFacilityMarkers = facilities\n      .filter(facility => \n        facility.fcltyCrdntLa !== 0 &&\n        facility.fcltyCrdntLo !== 0\n      )\n      .map(facility => {\n        // Create marker element with custom icon\n        const element = document.createElement('div');\n        element.innerHTML = `\n          <img src=\"${markerIcon}\" alt=\"facility marker\" style=\"width: 24px; height: 24px;\">\n        `;\n\n        const marker = new window.google.maps.marker.AdvancedMarkerElement({\n          position: {\n            lat: Number(facility.fcltyCrdntLa),\n            lng: Number(facility.fcltyCrdntLo)\n          },\n          content: element\n        });\n\n        // Add click listener\n        marker.addListener('click', () => {\n          setSelectedFacility(facility);\n        });\n\n        return marker;\n      });\n\n    // Create new clusterer with custom renderer\n    clustererRef.current = new MarkerClusterer({\n      map,\n      markers: validFacilityMarkers,\n      renderer: customRenderer,\n      gridSize: 60,\n      maxZoom: 15,\n      zIndex: 1\n    });\n\n    return () => {\n      if (clustererRef.current) {\n        clustererRef.current.clearMarkers();\n      }\n    };\n  }, [facilities, mapRef, setSelectedFacility, markerIcon]);\n\n  return clustererRef;\n};\n\nexport default useMarkerClusterer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}