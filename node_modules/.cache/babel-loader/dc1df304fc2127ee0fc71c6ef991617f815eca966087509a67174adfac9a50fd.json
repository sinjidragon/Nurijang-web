{"ast":null,"code":"const base_url=process.env.REACT_APP_BASE_URL;const calculateDistance=(lat1,lon1,lat2,lon2)=>{const R=6371;// 지구의 반지름 (km)\nconst dLat=deg2rad(lat2-lat1);const dLon=deg2rad(lon2-lon1);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(deg2rad(lat1))*Math.cos(deg2rad(lat2))*Math.sin(dLon/2)*Math.sin(dLon/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;};const deg2rad=deg=>{return deg*(Math.PI/180);};const validateFacility=facility=>{var _facility$fcltyNm;return{id:facility.id||0,fcltyCrdntLa:Number(facility.fcltyCrdntLa||0),fcltyCrdntLo:Number(facility.fcltyCrdntLo||0),fcltyNm:((_facility$fcltyNm=facility.fcltyNm)===null||_facility$fcltyNm===void 0?void 0:_facility$fcltyNm.replace('location_on','').trim())||'',fcltyAddr:facility.fcltyAddr||'',fcltyDetailAddr:facility.fcltyDetailAddr||'',rprsntvTelNo:facility.rprsntvTelNo||'',mainItemNm:facility.mainItemNm||'',distance:facility.distance||0};};export const fetchNearbyFacilities=async location=>{try{const response=await fetch(`${base_url}/facilities`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({fcltyCrdntLo:Number(location.lng).toFixed(6),fcltyCrdntLa:Number(location.lat).toFixed(6)})});if(!response.ok)throw new Error('시설 정보를 가져오는데 실패했습니다.');const data=await response.json();return Array.isArray(data)?data.map(validateFacility):[];}catch(error){console.error('Facilities fetch error:',error);throw error;}};export const searchFacilities=async params=>{try{const{searchType,searchText,location}=params;const url=`${base_url}${searchType==='item'?'/search-item':'/search'}`;const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({fcltyCrdntLo:Number(location.lng).toFixed(6),fcltyCrdntLa:Number(location.lat).toFixed(6),searchText:searchText.trim()})});if(!response.ok)throw new Error('검색에 실패했습니다.');const data=await response.json();return Array.isArray(data)?data.map(validateFacility).sort((a,b)=>a.distance-b.distance):[];}catch(error){console.error('Search error:',error);throw error;}};export const fetchSuggestions=async(searchText,location)=>{try{if(!(searchText!==null&&searchText!==void 0&&searchText.trim()))return null;if(!location||typeof location.lat!=='number'||typeof location.lng!=='number'){console.error('Invalid location:',location);return null;}const response=await fetch(`${base_url}/suggestions`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({fcltyCrdntLo:Number(location.lng).toFixed(6),fcltyCrdntLa:Number(location.lat).toFixed(6),searchText:searchText.trim()})});if(!response.ok)throw new Error('추천 검색어를 가져오는데 실패했습니다.');const data=await response.json();const processedData={mainItems:Array.isArray(data.mainItems)?data.mainItems:[],facilities:Array.isArray(data.facilities)?data.facilities.map(facility=>{const processedFacility=validateFacility(facility);if(location&&processedFacility.fcltyCrdntLa&&processedFacility.fcltyCrdntLo){const distance=calculateDistance(location.lat,location.lng,Number(processedFacility.fcltyCrdntLa),Number(processedFacility.fcltyCrdntLo));processedFacility.distance=distance;}return processedFacility;}).sort((a,b)=>(a.distance||0)-(b.distance||0)):[]};return processedData;}catch(error){console.error('Suggestions fetch error:',error);throw error;}};","map":{"version":3,"names":["base_url","process","env","REACT_APP_BASE_URL","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","deg","PI","validateFacility","facility","_facility$fcltyNm","id","fcltyCrdntLa","Number","fcltyCrdntLo","fcltyNm","replace","trim","fcltyAddr","fcltyDetailAddr","rprsntvTelNo","mainItemNm","distance","fetchNearbyFacilities","location","response","fetch","method","headers","body","JSON","stringify","lng","toFixed","lat","ok","Error","data","json","Array","isArray","map","error","console","searchFacilities","params","searchType","searchText","url","sort","b","fetchSuggestions","processedData","mainItems","facilities","processedFacility"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/services/api.js"],"sourcesContent":["const base_url = process.env.REACT_APP_BASE_URL;\n\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n\nconst deg2rad = (deg) => {\n  return deg * (Math.PI/180);\n};\n\nconst validateFacility = (facility) => {\n  return {\n    id: facility.id || 0,\n    fcltyCrdntLa: Number(facility.fcltyCrdntLa || 0),\n    fcltyCrdntLo: Number(facility.fcltyCrdntLo || 0),\n    fcltyNm: facility.fcltyNm?.replace('location_on', '').trim() || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    fcltyDetailAddr: facility.fcltyDetailAddr || '',\n    rprsntvTelNo: facility.rprsntvTelNo || '',\n    mainItemNm: facility.mainItemNm || '',\n    distance: facility.distance || 0\n  };\n};\n\nexport const fetchNearbyFacilities = async (location) => {\n  try {\n    const response = await fetch(`${base_url}/facilities`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    const data = await response.json();\n    \n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\n\nexport const searchFacilities = async (params) => {\n  try {\n    const { searchType, searchText, location } = params;\n    const url = `${base_url}${searchType === 'item' ? '/search-item' : '/search'}`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    const data = await response.json();\n    \n    return Array.isArray(data) ? data.map(validateFacility).sort((a, b) => a.distance - b.distance) : [];\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};\n\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!searchText?.trim()) return null;\n\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    const processedData = {\n      mainItems: Array.isArray(data.mainItems) ? data.mainItems : [],\n      facilities: Array.isArray(data.facilities) ? data.facilities.map(facility => {\n        const processedFacility = validateFacility(facility);\n        \n        if (location && processedFacility.fcltyCrdntLa && processedFacility.fcltyCrdntLo) {\n          const distance = calculateDistance(\n            location.lat,\n            location.lng,\n            Number(processedFacility.fcltyCrdntLa),\n            Number(processedFacility.fcltyCrdntLo)\n          );\n          processedFacility.distance = distance;\n        }\n\n        return processedFacility;\n      }).sort((a, b) => (a.distance || 0) - (b.distance || 0)) : []\n    };\n\n    return processedData;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}