{"ast":null,"code":"// services/api.js\nconst base_url = process.env.REACT_APP_BASE_URL;\nconst validateFacility = facility => {\n  return {\n    ...facility,\n    fcltyCrdntLa: facility.fcltyCrdntLa || 0,\n    fcltyCrdntLo: facility.fcltyCrdntLo || 0,\n    fcltyNm: facility.fcltyNm || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    distance: facility.distance || 0\n  };\n};\nexport const fetchNearbyFacilities = async location => {\n  try {\n    const response = await fetch(`${base_url}/facilities`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    const data = await response.json();\n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\nexport const searchFacilities = async params => {\n  try {\n    const {\n      searchType,\n      searchText,\n      location\n    } = params;\n    const url = `${base_url}${searchType === 'item' ? '/search-item' : '/search'}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    const data = await response.json();\n    return Array.isArray(data) ? data.map(validateFacility).sort((a, b) => a.distance - b.distance) : [];\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!(searchText !== null && searchText !== void 0 && searchText.trim())) return null;\n\n    // location 객체 검증\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    // 응답 데이터에 위치 정보가 포함되어 있는지 확인\n    console.log('Suggestions response:', data);\n    if (data !== null && data !== void 0 && data.facilities) {\n      data.facilities = data.facilities.map(facility => {\n        // 시설물의 좌표가 유효한지 확인\n        const isValidCoords = facility.fcltyCrdntLa !== 0 && facility.fcltyCrdntLo !== 0 && facility.fcltyCrdntLa !== null && facility.fcltyCrdntLo !== null;\n        if (!isValidCoords) {\n          console.warn('Invalid facility coordinates:', facility);\n          return facility;\n        }\n\n        // 거리 계산\n        const distance = calculateDistance(location.lat, location.lng, Number(facility.fcltyCrdntLa), Number(facility.fcltyCrdntLo));\n        return {\n          ...facility,\n          distance: distance || 0\n        };\n      }).sort((a, b) => a.distance - b.distance);\n    }\n    return data;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // 거리 (km)\n  return d;\n}\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}","map":{"version":3,"names":["base_url","process","env","REACT_APP_BASE_URL","validateFacility","facility","fcltyCrdntLa","fcltyCrdntLo","fcltyNm","fcltyAddr","distance","fetchNearbyFacilities","location","response","fetch","method","headers","body","JSON","stringify","Number","lng","toFixed","lat","ok","Error","data","json","Array","isArray","map","error","console","searchFacilities","params","searchType","searchText","url","trim","sort","a","b","fetchSuggestions","log","facilities","isValidCoords","warn","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","d","deg","PI"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/services/api.js"],"sourcesContent":["// services/api.js\nconst base_url = process.env.REACT_APP_BASE_URL;\n\nconst validateFacility = (facility) => {\n  return {\n    ...facility,\n    fcltyCrdntLa: facility.fcltyCrdntLa || 0,\n    fcltyCrdntLo: facility.fcltyCrdntLo || 0,\n    fcltyNm: facility.fcltyNm || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    distance: facility.distance || 0\n  };\n};\n\nexport const fetchNearbyFacilities = async (location) => {\n  try {\n    const response = await fetch(`${base_url}/facilities`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\n\nexport const searchFacilities = async (params) => {\n  try {\n    const { searchType, searchText, location } = params;\n    const url = `${base_url}${searchType === 'item' ? '/search-item' : '/search'}`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    const data = await response.json();\n\n    return Array.isArray(data) \n      ? data.map(validateFacility).sort((a, b) => a.distance - b.distance) \n      : [];\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};\n\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!searchText?.trim()) return null;\n\n    // location 객체 검증\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    // 응답 데이터에 위치 정보가 포함되어 있는지 확인\n    console.log('Suggestions response:', data);\n\n    if (data?.facilities) {\n      data.facilities = data.facilities\n        .map(facility => {\n          // 시설물의 좌표가 유효한지 확인\n          const isValidCoords = \n            facility.fcltyCrdntLa !== 0 && \n            facility.fcltyCrdntLo !== 0 &&\n            facility.fcltyCrdntLa !== null && \n            facility.fcltyCrdntLo !== null;\n\n          if (!isValidCoords) {\n            console.warn('Invalid facility coordinates:', facility);\n            return facility;\n          }\n\n          // 거리 계산\n          const distance = calculateDistance(\n            location.lat,\n            location.lng,\n            Number(facility.fcltyCrdntLa),\n            Number(facility.fcltyCrdntLo)\n          );\n\n          return {\n            ...facility,\n            distance: distance || 0\n          };\n        })\n        .sort((a, b) => a.distance - b.distance);\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};\n\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const d = R * c; // 거리 (km)\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI/180);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}