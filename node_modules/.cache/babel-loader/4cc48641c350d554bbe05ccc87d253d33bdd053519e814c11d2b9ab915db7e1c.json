{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useMarkerClusterer.js\nimport { useRef, useEffect } from 'react';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\nconst createSvgClusterIcon = (size, color, opacity) => {\n  const svg = `\n    <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 ${size} ${size}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle \n        cx=\"${size / 2}\" \n        cy=\"${size / 2}\" \n        r=\"${size / 2 - 2}\"\n        fill=\"${color}\"\n        fill-opacity=\"${opacity}\"\n        stroke=\"white\"\n        stroke-width=\"2\"\n      />\n    </svg>\n  `;\n  return 'data:image/svg+xml;base64,' + window.btoa(svg);\n};\nconst useMarkerClusterer = ({\n  mapRef,\n  facilities,\n  setSelectedFacility,\n  markerIcon\n}) => {\n  _s();\n  const clustererRef = useRef(null);\n  useEffect(() => {\n    var _mapRef$current, _mapRef$current$state;\n    if (!((_mapRef$current = mapRef.current) !== null && _mapRef$current !== void 0 && (_mapRef$current$state = _mapRef$current.state) !== null && _mapRef$current$state !== void 0 && _mapRef$current$state.map)) return;\n    const map = mapRef.current.state.map;\n    if (clustererRef.current) {\n      clustererRef.current.clearMarkers();\n    }\n    const validFacilityMarkers = facilities.filter(facility => facility.fcltyCrdntLa !== 0 && facility.fcltyCrdntLo !== 0).map(facility => {\n      const marker = new window.google.maps.Marker({\n        position: {\n          lat: Number(facility.fcltyCrdntLa),\n          lng: Number(facility.fcltyCrdntLo)\n        },\n        icon: markerIcon\n      });\n      marker.addListener('click', () => {\n        setSelectedFacility(facility);\n      });\n      return marker;\n    });\n    clustererRef.current = new MarkerClusterer({\n      map,\n      markers: validFacilityMarkers,\n      gridSize: 60,\n      maxZoom: 15,\n      styles: [{\n        textColor: 'white',\n        textSize: 13,\n        width: 40,\n        height: 40,\n        url: createSvgClusterIcon(40, '#596FB7', 0.95)\n      }, {\n        textColor: 'white',\n        textSize: 14,\n        width: 50,\n        height: 50,\n        url: createSvgClusterIcon(50, '#11235A', 0.95)\n      }, {\n        textColor: 'white',\n        textSize: 16,\n        width: 60,\n        height: 60,\n        url: createSvgClusterIcon(60, '#11235A', 1)\n      }]\n    });\n    return () => {\n      if (clustererRef.current) {\n        clustererRef.current.clearMarkers();\n      }\n    };\n  }, [facilities, mapRef, setSelectedFacility, markerIcon]);\n  return clustererRef;\n};\n_s(useMarkerClusterer, \"IMRUIXsUmwVJPmbaT4ErJRM7+ik=\");\nexport default useMarkerClusterer;","map":{"version":3,"names":["useRef","useEffect","MarkerClusterer","createSvgClusterIcon","size","color","opacity","svg","window","btoa","useMarkerClusterer","mapRef","facilities","setSelectedFacility","markerIcon","_s","clustererRef","_mapRef$current","_mapRef$current$state","current","state","map","clearMarkers","validFacilityMarkers","filter","facility","fcltyCrdntLa","fcltyCrdntLo","marker","google","maps","Marker","position","lat","Number","lng","icon","addListener","markers","gridSize","maxZoom","styles","textColor","textSize","width","height","url"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/hooks/useMarkerClusterer.js"],"sourcesContent":["// hooks/useMarkerClusterer.js\nimport { useRef, useEffect } from 'react';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\n\nconst createSvgClusterIcon = (size, color, opacity) => {\n  const svg = `\n    <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 ${size} ${size}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle \n        cx=\"${size/2}\" \n        cy=\"${size/2}\" \n        r=\"${size/2 - 2}\"\n        fill=\"${color}\"\n        fill-opacity=\"${opacity}\"\n        stroke=\"white\"\n        stroke-width=\"2\"\n      />\n    </svg>\n  `;\n  \n  return 'data:image/svg+xml;base64,' + window.btoa(svg);\n};\n\nconst useMarkerClusterer = ({ \n  mapRef, \n  facilities, \n  setSelectedFacility,\n  markerIcon\n}) => {\n  const clustererRef = useRef(null);\n\n  useEffect(() => {\n    if (!mapRef.current?.state?.map) return;\n\n    const map = mapRef.current.state.map;\n    \n    if (clustererRef.current) {\n      clustererRef.current.clearMarkers();\n    }\n\n    const validFacilityMarkers = facilities\n      .filter(facility => \n        facility.fcltyCrdntLa !== 0 && \n        facility.fcltyCrdntLo !== 0\n      )\n      .map(facility => {\n        const marker = new window.google.maps.Marker({\n          position: {\n            lat: Number(facility.fcltyCrdntLa),\n            lng: Number(facility.fcltyCrdntLo)\n          },\n          icon: markerIcon\n        });\n\n        marker.addListener('click', () => {\n          setSelectedFacility(facility);\n        });\n\n        return marker;\n      });\n\n    clustererRef.current = new MarkerClusterer({\n      map,\n      markers: validFacilityMarkers,\n      gridSize: 60,\n      maxZoom: 15,\n      styles: [\n        {\n          textColor: 'white',\n          textSize: 13,\n          width: 40,\n          height: 40,\n          url: createSvgClusterIcon(40, '#596FB7', 0.95)\n        },\n        {\n          textColor: 'white',\n          textSize: 14,\n          width: 50,\n          height: 50,\n          url: createSvgClusterIcon(50, '#11235A', 0.95)\n        },\n        {\n          textColor: 'white',\n          textSize: 16,\n          width: 60,\n          height: 60,\n          url: createSvgClusterIcon(60, '#11235A', 1)\n        }\n      ]\n    });\n\n    return () => {\n      if (clustererRef.current) {\n        clustererRef.current.clearMarkers();\n      }\n    };\n  }, [facilities, mapRef, setSelectedFacility, markerIcon]);\n\n  return clustererRef;\n};\n\nexport default useMarkerClusterer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}