{"ast":null,"code":"var _s = $RefreshSig$();\nexport const useMapState = () => {\n  _s();\n  const [center, setCenter] = useState({\n    lat: 37.5665,\n    lng: 126.9780\n  });\n  const [facilities, setFacilities] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFacility, setSelectedFacility] = useState(null);\n  const mapRef = useRef(null);\n  const getCurrentLocation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      setUserLocation(location); // 현재 위치 저장\n      setCenter(location);\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"위치 정보를 가져올 수 없습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 현재 지도 중심 위치 검색\n  const searchCurrentLocation = useCallback(async () => {\n    var _mapRef$current, _mapRef$current$state;\n    if (!((_mapRef$current = mapRef.current) !== null && _mapRef$current !== void 0 && (_mapRef$current$state = _mapRef$current.state) !== null && _mapRef$current$state !== void 0 && _mapRef$current$state.map)) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const map = mapRef.current.state.map;\n      const center = map.getCenter();\n      const location = {\n        lat: center.lat(),\n        lng: center.lng()\n      };\n      setUserLocation(location); // 현재 맵 중심 위치 저장\n\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"현재 위치에서 검색하는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return {\n    center,\n    setCenter,\n    facilities,\n    setFacilities,\n    userLocation,\n    // 저장된 위치 전달\n    setUserLocation,\n    loading,\n    setLoading,\n    error,\n    setError,\n    selectedFacility,\n    setSelectedFacility,\n    mapRef,\n    getCurrentLocation,\n    searchCurrentLocation\n  };\n};\n_s(useMapState, \"2hyVPXqPEsYue4ncj9u8u6RQSpc=\");","map":{"version":3,"names":["useMapState","_s","center","setCenter","useState","lat","lng","facilities","setFacilities","userLocation","setUserLocation","loading","setLoading","error","setError","selectedFacility","setSelectedFacility","mapRef","useRef","getCurrentLocation","useCallback","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","coords","latitude","longitude","data","fetchNearbyFacilities","searchCurrentLocation","_mapRef$current","_mapRef$current$state","current","state","map","getCenter"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/hooks/useMapState.js"],"sourcesContent":["export const useMapState = () => {\n  const [center, setCenter] = useState({ lat: 37.5665, lng: 126.9780 });\n  const [facilities, setFacilities] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFacility, setSelectedFacility] = useState(null);\n  const mapRef = useRef(null);\n\n  const getCurrentLocation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      setUserLocation(location); // 현재 위치 저장\n      setCenter(location);\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"위치 정보를 가져올 수 없습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 현재 지도 중심 위치 검색\n  const searchCurrentLocation = useCallback(async () => {\n    if (!mapRef.current?.state?.map) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const map = mapRef.current.state.map;\n      const center = map.getCenter();\n      const location = {\n        lat: center.lat(),\n        lng: center.lng()\n      };\n      setUserLocation(location); // 현재 맵 중심 위치 저장\n      \n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"현재 위치에서 검색하는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    center,\n    setCenter,\n    facilities,\n    setFacilities,\n    userLocation, // 저장된 위치 전달\n    setUserLocation,\n    loading,\n    setLoading,\n    error,\n    setError,\n    selectedFacility,\n    setSelectedFacility,\n    mapRef,\n    getCurrentLocation,\n    searchCurrentLocation\n  };\n};"],"mappings":";AAAA,OAAO,MAAMA,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAS,CAAC,CAAC;EACrE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMa,MAAM,GAAGC,MAAM,CAAC,IAAI,CAAC;EAE3B,MAAMC,kBAAkB,GAAGC,WAAW,CAAC,YAAY;IACjDR,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtDC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACJ,OAAO,EAAEC,MAAM,CAAC;MAC3D,CAAC,CAAC;MAEF,MAAMI,QAAQ,GAAG;QACfvB,GAAG,EAAEgB,QAAQ,CAACQ,MAAM,CAACC,QAAQ;QAC7BxB,GAAG,EAAEe,QAAQ,CAACQ,MAAM,CAACE;MACvB,CAAC;MACDrB,eAAe,CAACkB,QAAQ,CAAC,CAAC,CAAC;MAC3BzB,SAAS,CAACyB,QAAQ,CAAC;MACnB,MAAMI,IAAI,GAAG,MAAMC,qBAAqB,CAACL,QAAQ,CAAC;MAClDpB,aAAa,CAACwB,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,QAAQ,CAAC,oBAAoB,CAAC;IAChC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsB,qBAAqB,GAAGd,WAAW,CAAC,YAAY;IAAA,IAAAe,eAAA,EAAAC,qBAAA;IACpD,IAAI,GAAAD,eAAA,GAAClB,MAAM,CAACoB,OAAO,cAAAF,eAAA,gBAAAC,qBAAA,GAAdD,eAAA,CAAgBG,KAAK,cAAAF,qBAAA,eAArBA,qBAAA,CAAuBG,GAAG,GAAE;IAEjC3B,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMyB,GAAG,GAAGtB,MAAM,CAACoB,OAAO,CAACC,KAAK,CAACC,GAAG;MACpC,MAAMrC,MAAM,GAAGqC,GAAG,CAACC,SAAS,CAAC,CAAC;MAC9B,MAAMZ,QAAQ,GAAG;QACfvB,GAAG,EAAEH,MAAM,CAACG,GAAG,CAAC,CAAC;QACjBC,GAAG,EAAEJ,MAAM,CAACI,GAAG,CAAC;MAClB,CAAC;MACDI,eAAe,CAACkB,QAAQ,CAAC,CAAC,CAAC;;MAE3B,MAAMI,IAAI,GAAG,MAAMC,qBAAqB,CAACL,QAAQ,CAAC;MAClDpB,aAAa,CAACwB,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLV,MAAM;IACNC,SAAS;IACTI,UAAU;IACVC,aAAa;IACbC,YAAY;IAAE;IACdC,eAAe;IACfC,OAAO;IACPC,UAAU;IACVC,KAAK;IACLC,QAAQ;IACRC,gBAAgB;IAChBC,mBAAmB;IACnBC,MAAM;IACNE,kBAAkB;IAClBe;EACF,CAAC;AACH,CAAC;AAACjC,EAAA,CAzEWD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}