{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useMapState.js\nimport { useState, useRef, useCallback } from 'react';\nimport { fetchNearbyFacilities } from '../services/api';\nexport const useMapState = () => {\n  _s();\n  const [center, setCenter] = useState({\n    lat: 37.5665,\n    lng: 126.9780\n  });\n  const [facilities, setFacilities] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFacility, setSelectedFacility] = useState(null);\n  const mapRef = useRef(null);\n  const getCurrentLocation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      setUserLocation(location);\n      setCenter(location);\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"위치 정보를 가져올 수 없습니다. 위치 서비스가 활성화되어 있는지 확인해주세요.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const searchCurrentLocation = useCallback(async () => {\n    var _mapRef$current, _mapRef$current$state;\n    if (!((_mapRef$current = mapRef.current) !== null && _mapRef$current !== void 0 && (_mapRef$current$state = _mapRef$current.state) !== null && _mapRef$current$state !== void 0 && _mapRef$current$state.map)) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const map = mapRef.current.state.map;\n      const center = map.getCenter();\n      const location = {\n        lat: center.lat(),\n        lng: center.lng()\n      };\n      setUserLocation(location); // 추가된 부분\n\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"현재 지도 위치에서 시설을 검색하는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return {\n    center,\n    setCenter,\n    facilities,\n    setFacilities,\n    userLocation,\n    setUserLocation,\n    loading,\n    setLoading,\n    error,\n    setError,\n    selectedFacility,\n    setSelectedFacility,\n    mapRef,\n    getCurrentLocation,\n    searchCurrentLocation\n  };\n};\n_s(useMapState, \"2hyVPXqPEsYue4ncj9u8u6RQSpc=\");\nexport default useMapState;","map":{"version":3,"names":["useState","useRef","useCallback","fetchNearbyFacilities","useMapState","_s","center","setCenter","lat","lng","facilities","setFacilities","userLocation","setUserLocation","loading","setLoading","error","setError","selectedFacility","setSelectedFacility","mapRef","getCurrentLocation","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","coords","latitude","longitude","data","searchCurrentLocation","_mapRef$current","_mapRef$current$state","current","state","map","getCenter"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/hooks/useMapState.js"],"sourcesContent":["// hooks/useMapState.js\nimport { useState, useRef, useCallback } from 'react';\nimport { fetchNearbyFacilities } from '../services/api';\n\nexport const useMapState = () => {\n  const [center, setCenter] = useState({ lat: 37.5665, lng: 126.9780 });\n  const [facilities, setFacilities] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFacility, setSelectedFacility] = useState(null);\n  const mapRef = useRef(null);\n\n  const getCurrentLocation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      setUserLocation(location);\n      setCenter(location);\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"위치 정보를 가져올 수 없습니다. 위치 서비스가 활성화되어 있는지 확인해주세요.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const searchCurrentLocation = useCallback(async () => {\n    if (!mapRef.current?.state?.map) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const map = mapRef.current.state.map;\n      const center = map.getCenter();\n      const location = {\n        lat: center.lat(),\n        lng: center.lng()\n      };\n      setUserLocation(location);  // 추가된 부분\n\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"현재 지도 위치에서 시설을 검색하는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    center,\n    setCenter,\n    facilities,\n    setFacilities,\n    userLocation,\n    setUserLocation,\n    loading,\n    setLoading,\n    error,\n    setError,\n    selectedFacility,\n    setSelectedFacility,\n    mapRef,\n    getCurrentLocation,\n    searchCurrentLocation\n  };\n};\n\nexport default useMapState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}