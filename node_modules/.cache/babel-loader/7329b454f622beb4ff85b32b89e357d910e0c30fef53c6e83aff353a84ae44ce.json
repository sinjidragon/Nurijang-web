{"ast":null,"code":"// services/api.js\nconst base_url = process.env.REACT_APP_BASE_URL;\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nconst deg2rad = deg => {\n  return deg * (Math.PI / 180);\n};\nconst validateFacility = facility => {\n  var _facility$fcltyNm;\n  return {\n    id: facility.id || 0,\n    fcltyCrdntLa: Number(facility.fcltyCrdntLa || 0),\n    fcltyCrdntLo: Number(facility.fcltyCrdntLo || 0),\n    fcltyNm: ((_facility$fcltyNm = facility.fcltyNm) === null || _facility$fcltyNm === void 0 ? void 0 : _facility$fcltyNm.replace('location_on', '').trim()) || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    fcltyDetailAddr: facility.fcltyDetailAddr || '',\n    rprsntvTelNo: facility.rprsntvTelNo || '',\n    distance: facility.distance || 0\n  };\n};\nexport const fetchNearbyFacilities = async location => {\n  try {\n    const response = await fetch(`${base_url}/facilities`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    const data = await response.json();\n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\nexport const searchFacilities = async params => {\n  try {\n    const {\n      searchType,\n      searchText,\n      location\n    } = params;\n    const url = `${base_url}${searchType === 'item' ? '/search-item' : '/search'}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    const data = await response.json();\n    return Array.isArray(data) ? data.map(validateFacility).sort((a, b) => a.distance - b.distance) : [];\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!(searchText !== null && searchText !== void 0 && searchText.trim())) return null;\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n    console.log('Raw suggestions response:', data);\n    const processedData = {\n      mainItems: Array.isArray(data.mainItems) ? data.mainItems : [],\n      facilities: Array.isArray(data.facilities) ? data.facilities.map(facility => {\n        const processedFacility = validateFacility(facility);\n        if (location && processedFacility.fcltyCrdntLa && processedFacility.fcltyCrdntLo) {\n          const distance = calculateDistance(location.lat, location.lng, Number(processedFacility.fcltyCrdntLa), Number(processedFacility.fcltyCrdntLo));\n          processedFacility.distance = distance;\n        }\n        return processedFacility;\n      }).sort((a, b) => (a.distance || 0) - (b.distance || 0)) : []\n    };\n    console.log('Processed suggestions:', processedData);\n    return processedData;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["base_url","process","env","REACT_APP_BASE_URL","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","deg","PI","validateFacility","facility","_facility$fcltyNm","id","fcltyCrdntLa","Number","fcltyCrdntLo","fcltyNm","replace","trim","fcltyAddr","fcltyDetailAddr","rprsntvTelNo","distance","fetchNearbyFacilities","location","response","fetch","method","headers","body","JSON","stringify","lng","toFixed","lat","ok","Error","data","json","Array","isArray","map","error","console","searchFacilities","params","searchType","searchText","url","sort","b","fetchSuggestions","log","processedData","mainItems","facilities","processedFacility"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/services/api.js"],"sourcesContent":["// services/api.js\nconst base_url = process.env.REACT_APP_BASE_URL;\n\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nconst deg2rad = (deg) => {\n  return deg * (Math.PI/180);\n}\n\nconst validateFacility = (facility) => {\n  return {\n    id: facility.id || 0,\n    fcltyCrdntLa: Number(facility.fcltyCrdntLa || 0),\n    fcltyCrdntLo: Number(facility.fcltyCrdntLo || 0),\n    fcltyNm: facility.fcltyNm?.replace('location_on', '').trim() || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    fcltyDetailAddr: facility.fcltyDetailAddr || '',\n    rprsntvTelNo: facility.rprsntvTelNo || '',\n    distance: facility.distance || 0\n  };\n};\n\nexport const fetchNearbyFacilities = async (location) => {\n  try {\n    const response = await fetch(`${base_url}/facilities`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    const data = await response.json();\n    \n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\n\nexport const searchFacilities = async (params) => {\n  try {\n    const { searchType, searchText, location } = params;\n    const url = `${base_url}${searchType === 'item' ? '/search-item' : '/search'}`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    const data = await response.json();\n    \n    return Array.isArray(data) \n      ? data.map(validateFacility).sort((a, b) => a.distance - b.distance)\n      : [];\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};\n\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!searchText?.trim()) return null;\n\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      console.error('Invalid location:', location);\n      return null;\n    }\n\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    console.log('Raw suggestions response:', data);\n\n    const processedData = {\n      mainItems: Array.isArray(data.mainItems) ? data.mainItems : [],\n      facilities: Array.isArray(data.facilities) ? data.facilities.map(facility => {\n        const processedFacility = validateFacility(facility);\n        \n        if (location && processedFacility.fcltyCrdntLa && processedFacility.fcltyCrdntLo) {\n          const distance = calculateDistance(\n            location.lat,\n            location.lng,\n            Number(processedFacility.fcltyCrdntLa),\n            Number(processedFacility.fcltyCrdntLo)\n          );\n          processedFacility.distance = distance;\n        }\n\n        return processedFacility;\n      }).sort((a, b) => (a.distance || 0) - (b.distance || 0)) : []\n    };\n\n    console.log('Processed suggestions:', processedData);\n    return processedData;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}