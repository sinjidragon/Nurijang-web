{"ast":null,"code":"// 시설 데이터 검증 함수\nconst base_url = process.env.REACT_APP_BASE_URL;\nconst validateFacility = facility => {\n  return {\n    ...facility,\n    fcltyCrdntLa: facility.fcltyCrdntLa || 0,\n    fcltyCrdntLo: facility.fcltyCrdntLo || 0,\n    fcltyNm: facility.fcltyNm || '',\n    fcltyAddr: facility.fcltyAddr || '',\n    distance: facility.distance || 0\n  };\n};\nexport const fetchNearbyFacilities = async location => {\n  try {\n    const response = await fetch(`${base_url}/facilities`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6)\n      })\n    });\n    if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    // 응답 데이터 검증 및 정제\n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Facilities fetch error:', error);\n    throw error;\n  }\n};\nexport const searchFacilities = async params => {\n  try {\n    const {\n      searchType,\n      searchText,\n      location\n    } = params;\n    const url = searchType === 'item' ? `${base_url}/search-item` : '/search';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('검색에 실패했습니다.');\n    const data = await response.json();\n\n    // 응답 데이터 검증 및 정제\n    return Array.isArray(data) ? data.map(validateFacility) : [];\n  } catch (error) {\n    console.error('Search error:', error);\n    throw error;\n  }\n};\nexport const fetchSuggestions = async (searchText, location) => {\n  try {\n    if (!(searchText !== null && searchText !== void 0 && searchText.trim())) return null;\n    const response = await fetch(`${base_url}/suggestions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fcltyCrdntLo: Number(location.lng).toFixed(6),\n        fcltyCrdntLa: Number(location.lat).toFixed(6),\n        searchText: searchText.trim()\n      })\n    });\n    if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n    const data = await response.json();\n\n    // 시설 목록이 있는 경우에만 검증 및 정제\n    if (data !== null && data !== void 0 && data.facilities) {\n      data.facilities = data.facilities.map(validateFacility);\n    }\n    return data;\n  } catch (error) {\n    console.error('Suggestions fetch error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["base_url","process","env","REACT_APP_BASE_URL","validateFacility","facility","fcltyCrdntLa","fcltyCrdntLo","fcltyNm","fcltyAddr","distance","fetchNearbyFacilities","location","response","fetch","method","headers","body","JSON","stringify","Number","lng","toFixed","lat","ok","Error","data","json","Array","isArray","map","error","console","searchFacilities","params","searchType","searchText","url","trim","fetchSuggestions","facilities"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/services/api.js"],"sourcesContent":["// 시설 데이터 검증 함수\nconst base_url = process.env.REACT_APP_BASE_URL;\nconst validateFacility = (facility) => {\n    return {\n      ...facility,\n      fcltyCrdntLa: facility.fcltyCrdntLa || 0,\n      fcltyCrdntLo: facility.fcltyCrdntLo || 0,\n      fcltyNm: facility.fcltyNm || '',\n      fcltyAddr: facility.fcltyAddr || '',\n      distance: facility.distance || 0\n    };\n  };\n  \n  export const fetchNearbyFacilities = async (location) => {\n    try {\n      const response = await fetch(`${base_url}/facilities`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fcltyCrdntLo: Number(location.lng).toFixed(6),\n          fcltyCrdntLa: Number(location.lat).toFixed(6)\n        })\n      });\n  \n      if (!response.ok) throw new Error('시설 정보를 가져오는데 실패했습니다.');\n      const data = await response.json();\n      \n      // 응답 데이터 검증 및 정제\n      return Array.isArray(data) ? data.map(validateFacility) : [];\n    } catch (error) {\n      console.error('Facilities fetch error:', error);\n      throw error;\n    }\n  };\n  \n  export const searchFacilities = async (params) => {\n    try {\n      const { searchType, searchText, location } = params;\n      const url = searchType === 'item' ? `${base_url}/search-item` : '/search';\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fcltyCrdntLo: Number(location.lng).toFixed(6),\n          fcltyCrdntLa: Number(location.lat).toFixed(6),\n          searchText: searchText.trim()\n        })\n      });\n  \n      if (!response.ok) throw new Error('검색에 실패했습니다.');\n      const data = await response.json();\n      \n      // 응답 데이터 검증 및 정제\n      return Array.isArray(data) ? data.map(validateFacility) : [];\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  };\n  \n  export const fetchSuggestions = async (searchText, location) => {\n    try {\n      if (!searchText?.trim()) return null;\n      \n      const response = await fetch(`${base_url}/suggestions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fcltyCrdntLo: Number(location.lng).toFixed(6),\n          fcltyCrdntLa: Number(location.lat).toFixed(6),\n          searchText: searchText.trim()\n        })\n      });\n  \n      if (!response.ok) throw new Error('추천 검색어를 가져오는데 실패했습니다.');\n      const data = await response.json();\n      \n      // 시설 목록이 있는 경우에만 검증 및 정제\n      if (data?.facilities) {\n        data.facilities = data.facilities.map(validateFacility);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Suggestions fetch error:', error);\n      throw error;\n    }\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}