{"ast":null,"code":"// hooks/useMapState.js\nimport{useState,useRef,useCallback}from'react';import{fetchNearbyFacilities}from'../services/api';export const useMapState=()=>{const[center,setCenter]=useState({lat:37.5665,lng:126.9780});const[facilities,setFacilities]=useState([]);const[userLocation,setUserLocation]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[selectedFacility,setSelectedFacility]=useState(null);const mapRef=useRef(null);const getCurrentLocation=useCallback(async()=>{setLoading(true);setError(null);try{const position=await new Promise((resolve,reject)=>{navigator.geolocation.getCurrentPosition(resolve,reject);});const location={lat:position.coords.latitude,lng:position.coords.longitude};setUserLocation(location);setCenter(location);const data=await fetchNearbyFacilities(location);setFacilities(data);}catch(error){setError(\"위치 정보를 가져올 수 없습니다. 위치 서비스가 활성화되어 있는지 확인해주세요.\");}finally{setLoading(false);}},[]);const searchCurrentLocation=useCallback(async()=>{var _mapRef$current,_mapRef$current$state;if(!((_mapRef$current=mapRef.current)!==null&&_mapRef$current!==void 0&&(_mapRef$current$state=_mapRef$current.state)!==null&&_mapRef$current$state!==void 0&&_mapRef$current$state.map))return;setLoading(true);setError(null);try{const map=mapRef.current.state.map;const center=map.getCenter();const location={lat:center.lat(),lng:center.lng()};setUserLocation(location);// 현재 지도 중심을 사용자 위치로 설정\nconst data=await fetchNearbyFacilities(location);setFacilities(data);}catch(error){setError(\"현재 지도 위치에서 시설을 검색하는데 실패했습니다.\");}finally{setLoading(false);}},[]);return{center,setCenter,facilities,setFacilities,userLocation,setUserLocation,loading,setLoading,error,setError,selectedFacility,setSelectedFacility,mapRef,getCurrentLocation,searchCurrentLocation};};","map":{"version":3,"names":["useState","useRef","useCallback","fetchNearbyFacilities","useMapState","center","setCenter","lat","lng","facilities","setFacilities","userLocation","setUserLocation","loading","setLoading","error","setError","selectedFacility","setSelectedFacility","mapRef","getCurrentLocation","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","coords","latitude","longitude","data","searchCurrentLocation","_mapRef$current","_mapRef$current$state","current","state","map","getCenter"],"sources":["/Users/dgsw01/Documents/GitHub/Nurijang-web/src/hooks/useMapState.js"],"sourcesContent":["// hooks/useMapState.js\nimport { useState, useRef, useCallback } from 'react';\nimport { fetchNearbyFacilities } from '../services/api';\n\nexport const useMapState = () => {\n  const [center, setCenter] = useState({ lat: 37.5665, lng: 126.9780 });\n  const [facilities, setFacilities] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFacility, setSelectedFacility] = useState(null);\n  const mapRef = useRef(null);\n\n  const getCurrentLocation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      setUserLocation(location);\n      setCenter(location);\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"위치 정보를 가져올 수 없습니다. 위치 서비스가 활성화되어 있는지 확인해주세요.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const searchCurrentLocation = useCallback(async () => {\n    if (!mapRef.current?.state?.map) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const map = mapRef.current.state.map;\n      const center = map.getCenter();\n      const location = {\n        lat: center.lat(),\n        lng: center.lng()\n      };\n      setUserLocation(location);  // 현재 지도 중심을 사용자 위치로 설정\n\n      const data = await fetchNearbyFacilities(location);\n      setFacilities(data);\n    } catch (error) {\n      setError(\"현재 지도 위치에서 시설을 검색하는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    center,\n    setCenter,\n    facilities,\n    setFacilities,\n    userLocation,\n    setUserLocation,\n    loading,\n    setLoading,\n    error,\n    setError,\n    selectedFacility,\n    setSelectedFacility,\n    mapRef,\n    getCurrentLocation,\n    searchCurrentLocation\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}